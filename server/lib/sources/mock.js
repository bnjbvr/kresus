// This modules mocks output generated by weboob.
import moment from 'moment' ;

import { makeLogger, KError } from '../../helpers';
import errors from '../../shared/errors.json';


let log = makeLogger('sources/mock');

const TIME_TO_GENERATE_OPERATIONS_MS = 500;

let hashAccount = uuid => {
    let hash = uuid.charCodeAt(0) +
               uuid.charCodeAt(3) +
               uuid.charCodeAt(1);
    return {
        main: `${hash}1`,
        second: `${hash}2`,
        third: `${hash}3`
    };
};

export let SOURCE_NAME = 'mock';

export let fetchAccounts = async (access) => {
    let bankuuid = access.bank;

    let obj = hashAccount(bankuuid);
    let { main, second, third } = obj;

    let values = [
        {
            accountNumber: main,
            label: `Compte bancaire ${main}`,
            balance: '150',
            iban: '235711131719'
        },
        {
            accountNumber: second,
            label: `Livret A ${second}`,
            balance: '500'
        },
        {
            accountNumber: third,
            label: `Plan Epargne Logement ${third}`,
            balance: '0'
        }
    ];

    if (Math.random() > .8) {
        values.push({
            accountNumber: '0147200001',
            label: 'Assurance vie',
            balance: '1000'
        });
    }

    return values;
};


let randomLabels = [
    ['Café Moxka', 'Petit expresso rapido Café Moxka'],
    ['MerBnB', 'Paiement en ligne MerBNB'],
    ['Tabac Debourg', 'Bureau de tabac SARL Clopi Cloppa'],
    ['Rapide PSC', 'Paiement sans contact Rapide'],
    ['MacDollars PSC', 'Paiement sans contact Macdollars'],
    ['FNAK', 'FNAK CB blabla'],
    ['CB Sefaurat', 'Achat de parfum chez Sefaurat'],
    ['Polyprix CB', 'Courses chez Polyprix'],
    ['Croisement CB', 'Courses chez Croisement'],
    ['PRLV UJC', 'PRLV UJC'],
    ['CB Spotifaille', 'CB Spotifaille London'],
    ['Antiquaire', 'Antiquaire'],
    ['Le Perroquet Bourré', 'Le Perroquet Bourré SARL'],
    ['Le Vol de Nuit', 'Bar Le Vol De Nuit SARL'],
    ['Impots fonciers', `Prelevement impots fonciers numero reference
    47839743892 client 43278437289`],
    ['ESPA Carte Hassan Cehef', 'Paiement carte Hassan Cehef'],
    ['Indirect Energie', 'ESPA Indirect Energie SARL'],
    ['', 'VIR Mr Jean Claude Dusse'],
    ['Nuage Douillet', 'ESPA Abonnement Nuage Douillet'],
    ['Glagla Frigidaire', 'CB GLAGLA FRIGIDAIRE'],
    ['Digiticable', 'ESPA Digiticable'],
    ['NOGO Sport', 'CB NOGO Sport'],
    ['FramaHard', 'ESPA Don FramaHard'],
    ['Sergent Tchoutchou', 'CB online Sergent Tchoutchou'],
    ['RAeTP', 'CB Raleurs Ambulants et Traficoteurs Patentés']
];

let randomLabelsPositive = [
    ['VIR Nuage Douillet', 'VIR Nuage Douillet REFERENCE Salaire'],
    ['Impots', 'Remboursement impots en votre faveur'],
    ['', 'VIR Pots de vin et magouilles pas claires'],
    ['Case départ', 'Passage par la case depart'],
    ['Assurancetourix', 'Remboursement frais médicaux pour plâtre généralisé']
];

let rand = (low, high) => low + (Math.random() * (high - low) | 0);

let randInt = (low, high) => rand(low, high) | 0;

let randomArray = arr => arr[randInt(0, arr.length)];

let randomType = () => randInt(0, 10);

let generateDate = (lowDay, highDay, lowMonth, highMonth) =>
    moment()
        .month(rand(lowMonth, highMonth))
        .date(rand(lowDay, highDay))
        .format('YYYY-MM-DDT00:00:00.000[Z]');

let generateOne = account => {

    let n = rand(0, 100);
    let now = moment();
    let type = randomType();

    // with a 2% rate, generate a special operation to test duplicates
    // (happening on 4th of current month).
    if (n < 2) {
        return {
            account,
            amount: '-300',
            title: 'Loyer',
            raw: 'Loyer habitation',
            date: generateDate(4, 4, now.month(), now.month()),
            type
        };
    }

    let date = generateDate(1, now.date(), 0, now.month());

    if (n < 15) {
        let [title, raw] = randomArray(randomLabelsPositive);
        let amount = (rand(100, 800) + rand(0, 100) / 100).toString();

        return {
            account,
            amount,
            title,
            raw,
            date,
            type
        };
    }

    let [title, raw] = randomArray(randomLabels);
    let amount = (-rand(0, 60) + rand(0, 100) / 100).toString();

    return {
        account,
        amount,
        title,
        raw,
        date,
        type
    };
};

let generateRandomError = () => {
    let errorTable = [];
    for (let error of Object.keys(errors)) {
        errorTable.push(errors[error]);
    }
    return errorTable[randInt(0, errorTable.length - 1)];
};

let selectRandomAccount = uuid => {

    let n = rand(0, 100);
    let accounts = hashAccount(uuid);

    if (n < 90)
        return accounts.main;

    if (n < 95)
        return accounts.second;

    return accounts.third;
};

let generate = uuid => {
    let operations = [];
    let count = 5;

    let i = count;
    while (i--) {
        operations.push(generateOne(selectRandomAccount(uuid)));
    }

    while (rand(0, 100) > 70 && count < 8) {
        operations.push(generateOne(selectRandomAccount(uuid)));
        count++;
    }

    // Generate exact same operations imported at the same time
    // These operations shall not be considered as duplicates.
    if (rand(0, 100) > 85 && operations.length) {
        operations.push(operations[0]);
        count++;
    }

    // Generate always the same operation, so that it is considered
    // as a duplicate.
    if (rand(0, 100) > 70) {
        let duplicateOperation = {
            title: 'This is a duplicate operation',
            amount: '13.37',
            raw: 'This is a duplicate operation',
            account: hashAccount(uuid).main
        };
        // The date is one day difference, so it is considered a duplicate by
        // the client
        let date = moment(new Date('05/04/2020'));
        if (rand(0, 100) <= 50) {
            date = date.add(1, 'days');
        }
        duplicateOperation.date = date.format('YYYY-MM-DDT00:00:00.000[Z]');
        log.info('Generated a duplicate operation');
        operations.push(duplicateOperation);
        count++;
    }

    log.info(`generated ${count} fake operations`);
    return operations;
};

export let fetchTransactions = access => {
    let bankuuid = access.bank;
    return new Promise((accept, reject) => {
        setTimeout(() => {
            // Generate a random error
            if (rand(0, 100) <= 10) {
                let errorCode = generateRandomError();
                let error = new KError(`New random error: ${errorCode}`, 500,
                    errorCode);
                reject(error);
            }
            accept(generate(bankuuid));
        }, TIME_TO_GENERATE_OPERATIONS_MS);
    });
};
