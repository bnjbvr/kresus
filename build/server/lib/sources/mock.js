'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchTransactions = exports.fetchAccounts = exports.SOURCE_NAME = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This modules mocks output generated by weboob.


var log = (0, _helpers.makeLogger)('sources/mock');

var TIME_TO_GENERATE_OPERATIONS_MS = 500;

var hashAccount = function hashAccount(uuid) {
    var hash = uuid.charCodeAt(0) + uuid.charCodeAt(3) + uuid.charCodeAt(1);
    return {
        main: hash + '1',
        second: hash + '2',
        third: hash + '3'
    };
};

var SOURCE_NAME = exports.SOURCE_NAME = 'mock';

var fetchAccounts = exports.fetchAccounts = function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(access) {
        var bankuuid, obj, main, second, third, values;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        bankuuid = access.bank;
                        obj = hashAccount(bankuuid);
                        main = obj.main;
                        second = obj.second;
                        third = obj.third;
                        values = [{
                            accountNumber: main,
                            label: 'Compte bancaire ' + main,
                            balance: '150',
                            iban: '235711131719'
                        }, {
                            accountNumber: second,
                            label: 'Livret A ' + second,
                            balance: '500'
                        }, {
                            accountNumber: third,
                            label: 'Plan Epargne Logement ' + third,
                            balance: '0'
                        }];


                        if (Math.random() > .8) {
                            values.push({
                                accountNumber: '0147200001',
                                label: 'Assurance vie',
                                balance: '1000'
                            });
                        }

                        return _context.abrupt('return', values);

                    case 8:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));
    return function fetchAccounts(_x) {
        return ref.apply(this, arguments);
    };
}();

var randomLabels = [['Café Moxka', 'Petit expresso rapido Café Moxka'], ['MerBnB', 'Paiement en ligne MerBNB'], ['Tabac Debourg', 'Bureau de tabac SARL Clopi Cloppa'], ['Rapide PSC', 'Paiement sans contact Rapide'], ['MacDollars PSC', 'Paiement sans contact Macdollars'], ['FNAK', 'FNAK CB blabla'], ['CB Sefaurat', 'Achat de parfum chez Sefaurat'], ['Polyprix CB', 'Courses chez Polyprix'], ['Croisement CB', 'Courses chez Croisement'], ['PRLV UJC', 'PRLV UJC'], ['CB Spotifaille', 'CB Spotifaille London'], ['Antiquaire', 'Antiquaire'], ['Le Perroquet Bourré', 'Le Perroquet Bourré SARL'], ['Le Vol de Nuit', 'Bar Le Vol De Nuit SARL'], ['Impots fonciers', 'Prelevement impots fonciers numero reference\n    47839743892 client 43278437289'], ['ESPA Carte Hassan Cehef', 'Paiement carte Hassan Cehef'], ['Indirect Energie', 'ESPA Indirect Energie SARL'], ['', 'VIR Mr Jean Claude Dusse'], ['Nuage Douillet', 'ESPA Abonnement Nuage Douillet'], ['Glagla Frigidaire', 'CB GLAGLA FRIGIDAIRE'], ['Digiticable', 'ESPA Digiticable'], ['NOGO Sport', 'CB NOGO Sport'], ['FramaHard', 'ESPA Don FramaHard'], ['Sergent Tchoutchou', 'CB online Sergent Tchoutchou'], ['RAeTP', 'CB Raleurs Ambulants et Traficoteurs Patentés']];

var randomLabelsPositive = [['VIR Nuage Douillet', 'VIR Nuage Douillet REFERENCE Salaire'], ['Impots', 'Remboursement impots en votre faveur'], ['', 'VIR Pots de vin et magouilles pas claires'], ['Case départ', 'Passage par la case depart'], ['Assurancetourix', 'Remboursement frais médicaux pour plâtre généralisé']];

var rand = function rand(low, high) {
    return low + (Math.random() * (high - low) | 0);
};

var randInt = function randInt(low, high) {
    return rand(low, high) | 0;
};

var randomArray = function randomArray(arr) {
    return arr[randInt(0, arr.length)];
};

var randomType = function randomType() {
    return randInt(0, 10);
};

var generateDate = function generateDate(lowDay, highDay, lowMonth, highMonth) {
    return (0, _moment2.default)().month(rand(lowMonth, highMonth)).date(rand(lowDay, highDay)).format('YYYY-MM-DDT00:00:00.000[Z]');
};

var generateOne = function generateOne(account) {

    var n = rand(0, 100);
    var now = (0, _moment2.default)();
    var type = randomType();

    // with a 2% rate, generate a special operation to test duplicates
    // (happening on 4th of current month).
    if (n < 2) {
        return {
            account: account,
            amount: '-300',
            label: 'Loyer',
            raw: 'Loyer habitation',
            rdate: generateDate(4, 4, now.month(), now.month()),
            type: type
        };
    }

    var rdate = generateDate(1, now.date(), 0, now.month());

    if (n < 15) {
        var _randomArray = randomArray(randomLabelsPositive);

        var _randomArray2 = (0, _slicedToArray3.default)(_randomArray, 2);

        var _label = _randomArray2[0];
        var _raw = _randomArray2[1];

        var _amount = (rand(100, 800) + rand(0, 100) / 100).toString();

        return {
            account: account,
            amount: _amount,
            label: _label,
            raw: _raw,
            rdate: rdate,
            type: type
        };
    }

    var _randomArray3 = randomArray(randomLabels);

    var _randomArray4 = (0, _slicedToArray3.default)(_randomArray3, 2);

    var label = _randomArray4[0];
    var raw = _randomArray4[1];

    var amount = (-rand(0, 60) + rand(0, 100) / 100).toString();

    return {
        account: account,
        amount: amount,
        label: label,
        raw: raw,
        rdate: rdate,
        type: type
    };
};

var selectRandomAccount = function selectRandomAccount(uuid) {

    var n = rand(0, 100);
    var accounts = hashAccount(uuid);

    if (n < 90) return accounts.main;

    if (n < 95) return accounts.second;

    return accounts.third;
};

var generate = function generate(uuid) {
    var operations = [];
    var count = 5;

    var i = count;
    while (i--) {
        operations.push(generateOne(selectRandomAccount(uuid)));
    }

    while (rand(0, 100) > 70 && count < 8) {
        operations.push(generateOne(selectRandomAccount(uuid)));
        count++;
    }

    // Generate exact same operations imported at the same time
    // These operations shall not be considered as duplicates.
    if (rand(0, 100) > 85 && operations.length) {
        operations.push(operations[0]);
        count++;
    }

    // Generate always the same operation, so that it is considered
    // as a duplicate.
    if (rand(0, 100) > 70) {
        var duplicateOperation = {
            label: 'This is a duplicate operation',
            amount: '13.37',
            raw: 'This is a duplicate operation',
            account: hashAccount(uuid).main
        };
        // The rdate is one day difference, so it is considered a duplicate by
        // the client
        var date = (0, _moment2.default)(new Date('05/04/2020'));
        if (rand(0, 100) <= 50) {
            date = date.add(1, 'days');
        }
        duplicateOperation.rdate = date.format('YYYY-MM-DDT00:00:00.000[Z]');
        log.info('Generated a duplicate operation');
        operations.push(duplicateOperation);
        count++;
    }

    log.info('generated ' + count + ' fake operations');
    return operations;
};

var fetchTransactions = exports.fetchTransactions = function fetchTransactions(access) {
    var bankuuid = access.bank;
    return new _promise2.default(function (accept) {
        setTimeout(function () {
            accept(generate(bankuuid));
        }, TIME_TO_GENERATE_OPERATIONS_MS);
    });
};